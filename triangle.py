# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'triangle.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import copy

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1098, 837)
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.draw_steps)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.inputnodes = QtWidgets.QLineEdit(self.centralwidget)
        self.inputnodes.setGeometry(QtCore.QRect(480, 680, 113, 22))
        self.inputnodes.setObjectName("inputnodes")
        self.add = QtWidgets.QPushButton(self.centralwidget)
        self.add.setGeometry(QtCore.QRect(440, 720, 93, 28))
        self.add.setObjectName("add")
        self.reset = QtWidgets.QPushButton(self.centralwidget)
        self.reset.setGeometry(QtCore.QRect(540, 720, 93, 28))
        self.reset.setObjectName("reset")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(130, 20, 811, 651))
        font = QtGui.QFont()
        font.setPointSize(27)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setPlainText("")
        self.plainTextEdit.setObjectName("plainTextEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1098, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.reset.clicked.connect(self.stepbystep)
        self.add.clicked.connect(self.draw)
        self.level_list = []
        self.steps = 0
        self.shortest_steps = []
        self.show_index = 0
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def printt(self):
        text = ""
        for level in self.level_list:
            for element in level:
                text+=element
            text+="\n"
        self.plainTextEdit.setPlainText(text)
    def draw(self):
        self.steps = 0
        self.plainTextEdit.clear()
        self.level_list = list()
        self.shortest_steps = []
        self.show_index = 0
        if self.inputnodes.text() == "": return
        n = int(self.inputnodes.text())
        for i in range(1, n + 1):
            self.level_list.append(["*"]*i)
            n -= 1
        self.printt()
    def draw_steps(self):
        if self.show_index == len(self.shortest_steps):
            self.timer.stop()
            self.popup()
            return
        text = ""
        for level in self.shortest_steps[self.show_index]:
            for element in level:
                text += element
            text += "\n"
        print(text)
        self.plainTextEdit.setPlainText(text)
        self.show_index += 1
    def errpopup(self, msg):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Error")
        msg.setWindowIcon(QtGui.QIcon("icon.png"))
        msg.setText(msg)
        msg.setIcon(QtWidgets.QMessageBox.Critical)
        x = msg.exec_()
    def stepbystep(self):
        if not self.level_list: self.errpopup("Please Draw First!")
        if self.inputnodes.text() == "": return
        if self.plainTextEdit.toPlainText() == "": self.errpopup("Please Draw First!")
        curr_lvl = 0
        end_cont = self.level_list[-1]
        while self.level_list[0] != end_cont:
            self.level_list.append([])
            while len(self.level_list[-1]) != len(self.level_list[-2])-1:
                if len(self.level_list[curr_lvl]) == 0 :curr_lvl+=1
                self.level_list[-1].append("*")
                self.level_list[curr_lvl].pop(0)
                self.steps += 1
                if self.level_list[0] == [] : self.level_list.pop(0)
                self.shortest_steps.append(copy.deepcopy(self.level_list))
        self.timer.start()
        return
    def popup(self):
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Done")
        msg.setWindowIcon(QtGui.QIcon("icon.png"))
        msg.setText("Inverse Done!")
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setInformativeText("Problem was solved in "+str(self.steps)+" steps!")
        x = msg.exec_()
        self.steps = 0
        self.show_index = 0
        self.shortest_steps = []
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Problem Solver"))
        self.add.setText(_translate("MainWindow", "Draw"))
        self.reset.setText(_translate("MainWindow", "Solve"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
